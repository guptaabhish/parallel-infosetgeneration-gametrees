#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble

\usepackage{amsfonts}\usepackage{latexsym}\usepackage{fullpage}\usepackage{hyperref}\usepackage{subfig}\usepackage{tikz}\usepackage{examplep}\usepackage{moreverb}\usepackage{listings}\lstset{language=C,numbers=left,basicstyle=\footnotesize,numberstyle=\footnotesize}
\usetikzlibrary{arrows,decorations.pathmorphing,backgrounds,fit,shapes.geometric}
\usepgflibrary{shapes.geometric}
%\usepackage{ijcai09}


\setlength{\oddsidemargin}{0in}
\setlength{\topmargin}{0in}
\setlength{\textwidth}{6.5in}
\setlength{\textheight}{8.5in}

\newtheorem{fact}{Fact}[section]
\newtheorem{lemma}{Lemma}[section]
\newtheorem{theorem}[lemma]{Theorem}
\newtheorem{assumption}[lemma]{Assumption}
\newtheorem{definition}[lemma]{Definition}
\newtheorem{corollary}[lemma]{Corollary}
\newtheorem{prop}[lemma]{Proposition}
\newtheorem{claim}[lemma]{Claim}
\newtheorem{remark}[lemma]{Remark}
\newtheorem{prob}{Problem}
\newtheorem{conjecture}{Conjecture}


\newenvironment{mylisting}{\begin{list}{}{\setlength{\leftmargin}{1em}}\item\scriptsize}{\end{list}}

\newenvironment{mytinylisting}{\begin{list}{}{\setlength{\leftmargin}{1em}}\item\scriptsize\texttt}{\end{list}}
\newenvironment{proof}{\vspace{-0.15in}\noindent{\bf Proof:}}{\hspace*{\fill}$\Box$\par}
\newenvironment{proofsketch}{\noindent{\bf Proof Sketch.}}{\hspace*{\fill}$\Box$\par\vspace{4mm}}
\newenvironment{proofof}[1]{\smallskip\noindent{\bf Proof of #1.}}{\hspace*{\fill}$\Box$\par}

\newcommand{\etal}{{\em et al.}\ }
\newcommand{\assign}{\leftarrow}
\newcommand{\eps}{\epsilon}

%\newtheorem{lemma}{Lemma}
%\newtheorem{theorem}[lemma]{Theorem}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Title
Information Set Generation in Kriegspiel
\end_layout

\begin_layout Author
Abhishek Gupta
\begin_inset space \qquad{}
\end_inset

Mark Richards
\begin_inset space \qquad{}
\end_inset

Osman Sarood
\begin_inset Newline newline
\end_inset

University of Illinois at Urbana-Champaign
\begin_inset Newline newline
\end_inset

CS598LVK: Parallel Combinatorial Search
\end_layout

\begin_layout Abstract
Information Set Generation is the identification of the set of paths in
 an imperfect information game tree that are consistent with a player's
 observations.
 The ability to reason about the possible game history is crucial to the
 performance of game playing agents.
 In this work, we discuss the problem of information set generation in the
 context of kriegspiel (partially observable chess).
 We implement the algorithm on top of a general purpose combinatorial search
 engine and discuss its performance under different load balancing strategies
 and with different grainsize parameters.
 Our results suggest that our algorithm can be efficiently parallelized.
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In imperfect information games, players do not have access to full knowledge
 of the world.
 Examples of imperfect information include hidden cards in Poker
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "billings02challenge"

\end_inset

 or Bridge
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ginsberg96partition"

\end_inset

, hidden tiles in Scrabble
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "richards07opponent"

\end_inset

, or hidden pieces in Stratego or Kriegspiel (partially observable chess)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "li94chess"

\end_inset

.
 The game tree nodes that are indistinguishable to a player because they
 differ only in the information that is hidden to the player by rule are
 called that player's 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 information set.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 The ability to estimate the value of the possible states and to reason
 about the probability distribution over those states is crucial to playing
 imperfect information games well.
\end_layout

\begin_layout Standard
The term 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 belief state
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 is sometimes used interchangeably with information set to refer to a probabilit
y distribution over possible worlds.
 The latter term comes from the game theory community and is preferred here.
 A node in a game tree denotes not only the current state of the game, but
 also uniquely defines a path from the initial state or root node.
 Thus, a game tree node implicitly encodes not only the current state of
 the game but also the complete history of all decisions made by all players
 up to that point in the game, including the outcome of any chance moves
 such as dice rolls or card shuffling.
 Knowing one's information set means knowing all possible game histories.
\end_layout

\begin_layout Standard
For many specific games, solving the information set generation problem
 is trivial.
 For example, in a poker game, it is easy to see that the unseen cards held
 by a player's opponents may be any permutation of the cards not seen by
 that player (i.e., hole cards and any revealed community cards).
 After the betting rounds, it would not be reasonable to assume that each
 of these permutations of unseen cards is equally probable, as betting decisions
 made by the players up to that point would be affected by the quality of
 those players' cards.
 But the set of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 possible
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 hands for all of the opponents is easy to conceive and enumerate.
\end_layout

\begin_layout Standard
In the game of kriegspiel, information set generation is much more complicated.
 The player knows the opponent's position with certainty when the game begins,
 but after the initial move there may be varying levels of uncertainty about
 the location of the opponent's pieces.
 Unlike poker, it is not possible to simply permute all of the opponent's
 possible pieces over all of the squares not occupied by the player's own
 pieces.
 A configuration of pieces for the opponent is only valid if it can be reached
 by a legal sequence of moves.
 In the general case, finding the nodes in an information set is a combinatorial
 search problem.
\end_layout

\begin_layout Standard
Information set generation is not the same problem as solving a game tree,
 although it is arguably a necessary subroutine for quality game play in
 imperfect information games.
 In this work, we describe an approach to generating information sets for
 the game of kriegspiel.
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Standard
In this section, we describe the game of kriegspiel, and the particular
 variation of it that we have implemented.
\end_layout

\begin_layout Standard
Kriegspiel was invented by Henry Michael Temple in 1899.
 Historically, the game has required three parties: two competing players
 and one referee.
 Each player sits with a chessboard that is partitioned off so as not be
 seen by the other.
 One player controls the white pieces; the other controls the black pieces.
 The referee has a board on which she keeps track of both sets of pieces.
 Each player has a full set of chess pieces.
 He may position the opponent's pieces however he wishes on his own board
 (if at all).
 The players alternate moves as in a regular chess game, but instead of
 announcing their moves out loud, they write the source and destination
 square of their desired plays on a piece of paper and pass them to the
 referee, so that the requested move is not known to the other player.
 The referee, who knows the location of all pieces, checks the legality
 of the move.
 If the move is legal, the referee makes the move on his own board and announces
 that a legal move has been made and that it is the other player's turn
 to move.
 If the move is illegal because it is blocked by an opponent's piece or
 would place or leave the active player in check, the referee announces,
 
\begin_inset Quotes eld
\end_inset

No.
\begin_inset Quotes erd
\end_inset

 There is no penalty for attempting an illegal move.
 The player continues to attempt moves until one finally succeeds.
 If a player has no legal moves (because of stalemate or checkmate), the
 referee announces the game's result.
 With the advent of computers, it is convenient to play the game over a
 network, with a computer acting as the referee.
\end_layout

\begin_layout Standard
The referee makes other announcements besides declaring move illegal, and
 there are several variations of the game that differ only in the nature
 of these announcements.
 All declarations by the referee are heard by both players.
 Thus, for example, a player will hear and know if her opponent has attempted
 an illegal move, and will thus know that her opponent's pieces are configured
 in such a way as to allow at least one attemptable move that blocked or
 would leave him in check.
\end_layout

\begin_layout Standard
The referee announces when a player is in check.
 (And again, this announcement is heard by both players.) There is some variation
 in what additional information is supplied in this case.
 In one popular variant, the referee declares that the player is in check
 
\begin_inset Quotes eld
\end_inset

by rank,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

by file,
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

by diagonal,
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

by knight.
\begin_inset Quotes erd
\end_inset

 In the case of a diagonal attack, the referee may announce whether the
 checking piece is along the long or short diagonal (from the king's perspective
).
 It is possible to be in check by two pieces at the same time, in which
 case the direction of both attacks would be declared.
 In our implementation, for simplicity, the referee declares only that the
 player is in check, without specifying the nature of the attack.
\end_layout

\begin_layout Standard
In the case of the capture, the referee announces the location of the piece
 that was captured, so that both players can remove the piece from the board.
 In some variations, the referee also announces whether the captured piece
 was a pawn or non-pawn.
 In our implementation, information about the captured piece is not explicitly
 provided to the player who makes the capture.
\end_layout

\begin_layout Standard
Because there is no penalty for making illegal moves, it is often to a player's
 advantage to attempt to make moves which are likely to be illegal, as hearing
 such declarations from the referee can provide important information to
 a player about the location of the opponent's pieces.
 In particular, since a diagonal move by a pawn is legal only the case where
 such a move would capture an opponent's piece, it could potentially be
 profitable to attempt all or many pawn captures on every turn.
 In order to speed the game up, popular variants of the game require the
 referee to make some kind of declaration at the beginning of a player's
 turn with respect to the pawn captures that are available.
 This may be as simple as declaring 
\begin_inset Quotes eld
\end_inset

Try
\begin_inset Quotes erd
\end_inset

 to indicate that at least one pawn capture is possible.
 In our implementation, the referee declares all potential pawn captures.
\end_layout

\begin_layout Standard
In the case of a pawn promotion, the player making the pawn advancement
 would secretly notify the referee as to which piece (queen, rook, bishop,
 or knight) he would like.
 To reduce the number of bits needed to specify a move, our implementation
 allows only promotion to queen.
\end_layout

\begin_layout Standard
In general, any move that is legal in a regular chess match may be at least
 attempted by a player in kriegspiel.
 And any kriegspiel move that is ultimately allowed by the referee would
 also be a legal move in chess.
\end_layout

\begin_layout Standard
We assume that a player may not attempt the same illegal move more than
 once per turn.
 This means that if a player hears multiple declarations from the referee
 that the opponent has attempted an illegal move, the player may assume
 that the opponent has at least that many possibilities available to him.
\end_layout

\begin_layout Subsubsection
Special Moves
\end_layout

\begin_layout Standard
Our implementation supports the capability for pawns to move two spaces
 on their first turn.
 However, we did not implement support for castling or 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 en passant
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 pawn capture.
 (These moves require maintaining additional bits of information at each
 state that keep track of whether pieces have moved and/or whether pieces
 moved on the previous turn.)
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
includegraphics[width=0.2
\backslash
textwidth]{images/1W.png}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[1.
 d4]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:1W"

\end_inset


\begin_inset Graphics
	filename images/1W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[1.
 ...
 a5]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:1B"

\end_inset


\begin_inset Graphics
	filename images/1B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[2.
 Bg5]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:2W"

\end_inset


\begin_inset Graphics
	filename images/2W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[2.
 ...
 b6]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:2B"

\end_inset


\begin_inset Graphics
	filename images/2B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[3.
 Nc3]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:3W"

\end_inset


\begin_inset Graphics
	filename images/3W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[3.
 ...
 c5]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:3B"

\end_inset


\begin_inset Graphics
	filename images/3B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[4.
 d5]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:4W"

\end_inset


\begin_inset Graphics
	filename images/4W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[4.
 ...
 Na6]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:4B"

\end_inset


\begin_inset Graphics
	filename images/4B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[5.
 d6!]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:5W"

\end_inset


\begin_inset Graphics
	filename images/5W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[5.
 ...
 f6!]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:5B"

\end_inset


\begin_inset Graphics
	filename images/5B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[6.
 e4]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:6W"

\end_inset


\begin_inset Graphics
	filename images/6W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[6.
 ...
 fg]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:6B"

\end_inset


\begin_inset Graphics
	filename images/6B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[7.
 Bc4]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:7W"

\end_inset


\begin_inset Graphics
	filename images/7W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[7.
 ...
 ed]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:7B"

\end_inset


\begin_inset Graphics
	filename images/7B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[8 Qd5!]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:8W"

\end_inset


\begin_inset Graphics
	filename images/8W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[8 ...
 Qc7?]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:8B"

\end_inset


\begin_inset Graphics
	filename images/8B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[9 Qf7+]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:9W"

\end_inset


\begin_inset Graphics
	filename images/9W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[9 ...
 d8]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:9B"

\end_inset


\begin_inset Graphics
	filename images/9B.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset space \qquad{}
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
subfloat
\end_layout

\end_inset

[10 Qxf8++]
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:10W"

\end_inset


\begin_inset Graphics
	filename images/8W.png
	width 20text%

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Sequence of moves
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sequence"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
The concept of information sets is perhaps best explained through an example.
 (See also Appendix A.) Figures
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "listing"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sequence"

\end_inset

 show a full listing and the associated pictorial progression of an actual
 kriegspiel game from 
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "li94chess"

\end_inset

.
 We have adapted the notation used by Wolfe for Berkeley Kriegspiel.
 The moves are numbered in pairs: a move by white on one line followed by
 black's move on the next line.
 The actual move is shown first followed by a list of referee announcements.
 Captures announcements are prefixed with an X and give the location of
 the captured piece.
 Similarly, pawn tries announcements are prefixed with T.
 Attempted moves that were ultimately declared illegal are shown in a list
 following the `:'.
 For example at move 9, (Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:9W"

\end_inset

--
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:9B"

\end_inset

), black attempts to block a potential threat along the diagonal by moving
 a pawn to f6, then attempts to escape or capture a threat at f7.
 When both of these attempts fail, black can infer that his king is being
 threatened by a protected bishop or queen at f7.
 The attempt to move to e7 is black's way of finding out whether the threatening
 piece is a queen or bishop.
 When this move fails, black knows it is white's queen and ultimately retreats
 to d8.
 Note that the failed moves by white on turns 3 and 4 are a result of being
 blocked by the pawn at e2.
\end_layout

\begin_layout Standard
The listing in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "listing"

\end_inset

 corresponds to the referee's view of the game and would be useful for post-game
 analysis or commentary.
 During the game, players would not have access to the full information.
 The transcript from white's perspective is shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "filteredlisting"

\end_inset

.
 Note that black's actual moves have been replaced with 
\begin_inset Quotes eld
\end_inset

??
\begin_inset Quotes erd
\end_inset

 and lists of black's illegal moves have been replaced with the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 number
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 of illegal attempted moves.
 For example, on move 9, black 
\end_layout

\begin_layout Standard
The listing of a sequence of moves from the perspective of one player lists
 all of that player's moves exactly and includes the declarations from the
 referee.
 We refer to such a list as a player's observations.
 Given a list of observations for a sequence of moves, an information set
 is the set of all possible 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 sequences of moves for both players
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

, that are consistent with those observations.
 In other words, any sequence of moves that would have generated the same
 sequence of observations for black is in black's information set.
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "abbrevoutput"

\end_inset

 shows the information set for black after both player's have made five
 moves.
 From this list of possibilities, black can infer that white must have a
 bishop at g5 and a pawn at d6.
 There are 25 possible sequences of moves that are consistent with black's
 observations up to that point.
 Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "bothtimes"

\end_inset

 shows the size of the information sets for each player for each move in
 the game and the amount of time to find the full set on a single processor.
 Appendix B shows the full output of the program for the same point in the
 game (five moves for each player) and illustrates all of the possible positions
 in the belief state.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{mytinylisting}
\end_layout

\end_inset

 1.
 Pa2:a4 Pa7:a5 2.
 Pd2:d4 Pb7:b6 3.
 Bc1:g5 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d3 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pd3:d4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Pa2:a4 Pb7:b6 3.
 Bc1:g5 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:f4 Pb7:b6 3.
 Bf4:g5 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pa2:a3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pa2:a4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pb2:b3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pc2:c3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pe2:e3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pe2:e4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pf2:f3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pf2:f4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pg2:g3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pg2:g4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ph2:h3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ph2:h4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Nb1:a3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Nb1:c3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Nb1:d2 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Qd1:d2 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Qd1:d3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Qd1:c1 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ke1:d2 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ng1:f3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ng1:h3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{mytinylisting}
\end_layout

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
Abbreviated output from example game.
 Generating information sets for black after five turns by each player.
 From this, black can infer that there is definitely a white bishop at g5
 and a white pawn at d6.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "abbrevoutput"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="5">
<features>
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\series bold
White
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="none" valignment="top" usebox="none" special="c">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Black
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Ply
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Size
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Time
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Size
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Time
\series default
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.000 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.000 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.000 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.000 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.000 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
404 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.008
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
279 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.008 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
401 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.024
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
242 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.028 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1472 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.044
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
216 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.052 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
155 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.096
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
176 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.064 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
293 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.116
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3406 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.092 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
158 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.128
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2191 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.288 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
118 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.148
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1423 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.508 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
25 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.152
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
11 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1363 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.596 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
798 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.164
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1416 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.744 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
518 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.192
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1416 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.836 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
13564 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.304
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3440 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.97 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12394 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
.776
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3428 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.25 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
343652 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.75
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
50521 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.82 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
320704 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17.3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
17 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
43192 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.91 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
490162 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
99.9
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
18 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26128 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7.94 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3792 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
119
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19061 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.92 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14836 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
121
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Solution counts and running times for a sample kriegspiel game
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "bothtimes"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%Table~
\backslash
ref{sampletimes}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
begin{table}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
begin{tabular}{ccc}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%1 & 20 & .000
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%2 & 19 & .000
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%3 & 404 & .008
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%4 & 401 & .024
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%5 & 1472 & .044
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%6 & 155 & .096
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%7 & 293 & .116
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%8 & 158 & .128
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%9 & 118 & .148
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%10 & 25 & .152
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%11 & 798 & .164
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%12 & 518 & .192
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%13 & 13564 & .304
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%14 & 12394 & .776
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%15 & 343652 & 3.75
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%16 & 320704 & 17.3
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%17 & 490162 & 99.9
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%18 & 3792 & 119
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%19 & 14836 & 121 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
end{tabular}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
caption{Solution counts and running times for a sample kriegspiel game}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
label{blacktimes}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
end{table}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
The Information Set Generation Algorithm
\end_layout

\begin_layout Standard
We have formulated information set generation as a combinatorial search
 problem.
 The input to the algorithm is a list of observations for one player in
 a kriegspiel game.
 We assume that the agent has perfect recall (i.e., remembers all of its own
 decisions), which is a reasonable assumption for kriegspiel.
 (See
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "gilpin07algorithms"

\end_inset

 for a further discussion of perfect recall.)
\end_layout

\begin_layout Standard
The nodes in the search tree at depth 
\begin_inset Formula $n$
\end_inset

 correspond possible to possible sequences of 
\begin_inset Formula $n$
\end_inset

 plies from the start state.
 There is a search space variable for each ply in the game, and the values
 that a variable can take on are all possible legal moves.
 A kriegspiel game may last for on the order of tens of plies.
 Moves are parameterized by the piece that is relocating (both black and
 white have six different types of pieces: king, queen, rook, bishop, knight,
 pawn), the source square, and the destination square.
 Only a few hundred of the 
\begin_inset Formula $64\times64\times6$
\end_inset

 combinations represent moves that are legitimate in at least some scenarios.
 For example, no piece could ever move from a3 to h2
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
We observe the convention that on an 
\begin_inset Formula $8\times8$
\end_inset

 chessboard the rows are numbered 1 to 8 and the columns are labeled a to
 h.
\end_layout

\end_inset

 in one move.
\end_layout

\begin_layout Standard
Information set generation, then, is an all-solutions search through the
 space.
 Whenever a node in the search tree is found to be inconsistent with the
 actual observation given in the input, the subtree rooted at that node
 is pruned.
 There are types of observations that must match in order for the state
 to be found: check status, pawn tries, and illegal moves available/attempted.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "codelisting"

\end_inset

 shows the function at the heart of our information set generation algorithm.
 The actual observations can be viewed as global, read-only variables.
 All solutions (i.e., all nodes in the information set) will be located at
 the same depth in the tree: the depth that is equal to the number of plies
 in the observation list.
 Referee announcements regarding pawn tries or a player being in check are
 made prior to a move.
 The algorithm checks for the consistency of these observations in lines
 
\begin_inset Formula $5--6$
\end_inset

.
 If the search reaches the appropriate depth and passes these tests, then
 a solution has been found and is reported (line 
\begin_inset Formula $7$
\end_inset

).
\end_layout

\begin_layout Standard
Otherwise, we consider the possible moves that can be made from that state.
 If the player whose turn it is to move at the current level of the search
 tree is the same player from whose perspective we have received observations,
 then the next step is to make sure that every legal move that was attempted
 at the player at that ply is also at least attemptable at the game position
 that corresponds to the game tree node (lines 
\begin_inset Formula $15--22$
\end_inset

).
 We know exactly the legal move that was ultimately made at this depth (because
 we are assuming perfect recall), and we check to make sure that this move
 is indeed legal (pruning otherwise).
 If so, we apply that move and recurse (lines 
\begin_inset Formula $24--32$
\end_inset

).
 This corresponds to a 
\begin_inset Quotes eld
\end_inset

forced move
\begin_inset Quotes erd
\end_inset

 in the general search paradigm.
\end_layout

\begin_layout Standard
On the other hand, if the player whose turn it is to move at the current
 depth of the search tree is the opponent, then must consider all possible
 legal moves to branch on.
 We first check to make sure that the number of legal moves from this position
 is at least as large as the number of illegal moves that the opponent attempted
 (i.e., the number of times the referee said 
\begin_inset Quotes eld
\end_inset

No
\begin_inset Quotes erd
\end_inset

 before finally accepting the opponent's move).
 This is shown in lines 
\begin_inset Formula $39--42$
\end_inset

.
 At this point we generate a child for each move that would be accepted
 by the referee and recurse (lines 
\begin_inset Formula $44--52$
\end_inset

).
\end_layout

\begin_layout Standard
One of our goals was to assess the varying utilities of the different pruning
 criteria.
 We tried some different orderings of the tests and were somewhat surprised
 (and disappointed) to see that there was actually a fairly minimal impact
 on performance.
 This could be due to the fact that because of the tedious nature of encoding
 problem instances from actual games, we were not able to run experiments
 of a wide variety of types of positions (i.e., different styles of play).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
begin{listing}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\end_inset

 void generateInformationSet(uint16t* trueState, uint16t* possState, bool
 whiteMove, uint16t* possHistory, uint16t** levels, int depth) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 if (!samePawnTries(trueState, possState, whiteMove)) return; if (!sameCheckStat
us(trueState, possState, whiteMove)) return; if (depth == maxdepth) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 // Then we have found a solution nSolutions++; return; // Report solution
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 uint16t newPossState[16]; int nMoves = 0; generateAttemptableMoves(possState,
 whiteMove, levels[depth], nMoves,false); checkForCheck(possState, whiteMove,
 levels[depth], nMoves); // prunes if not equal assert (nMoves < NMOVES);
 //
\end_layout

\begin_layout Plain Layout
if (whitePerspective == whiteMove) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 // move from perspective plyaer SetMove& failures = failedMoves[depth];
 for (SetMove::constiterator itr = failures.begin(); itr != failures.end();
 ++itr) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 uint16t move = *itr ; if (!foundMatchingMove(move,levels[depth],nMoves))
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 return; // Prune: one of my own failed moves is not attemptable in this
 state 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 // We know exactly what the actual move was; make it uint16t& actualMove
 = moveHistory[depth]; if (!foundMatchingMove(actualMove,levels[depth],nMoves))
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 return; // Prune (because the move that we know we made at this depth is
 not legal) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 // Otherwise, recurse applyMove(possState,newPossState,actualMove); possHistory
[depth] = actualMove; generateInformationSet(newTrueState, newPossState,
 !whiteMove, possHistory, levels, depth+1); 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 else 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 // We are at a level in the search tree where // we are considering the
 possible moves for the opponent.
 // We know the number of attempted illegal moves, but not which ones
\end_layout

\begin_layout Plain Layout
// Must be enough attemptable moves in the state to match the number of
 failed attempts unsigned nIllegalMoves = countIllegalMoves(levels[depth],
 nMoves); if (nIllegalMoves < failedMoves[depth].size()) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 return; // Prune if not enough attemptable moves 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 // Now we want to try each possible move that is legally executable (not
 just attemptable) for (int i = 0; i < nMoves; i++) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 uint16t& move = levels[depth][i]; if (isLegal(move)) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

 // Obviously, we can only execute the moves that are actually legal from
 this state applyMove(possState,newPossState,move); possHistory[depth] =
 move; generateInformationSet(newTrueState, newPossState, !whiteMove, possHistor
y, levels, depth+1); 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
The heart of the information set generation algorithm.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "codelisting"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Performance Results
\end_layout

\begin_layout Standard
We built our search on top of the same general search engine that we used
 in class.
 The performance results reported in this section were obtained by running
 our program on Bleuprint with up to 1024 processors.
\end_layout

\begin_layout Standard
Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "speedups"

\end_inset

 shows the performance results for our algorithm on a randomly selected
 problem instance in which the size of the information set was about 4.5
 million.
 (This instance is not necessarily representative of all games or states
 of the game, but it was not cherry-picked in any way.) The table shows that
 the problem is indeed highly parallizable.
 The speedups are nearly linear for up to 32 processors, and even on 1024
 processors, we get a good speedup.
 In this particular instance, the sequential algorithm takes almost 25 minutes
 to run.
 But when parallelized on 1024 processors---perfectly reasonable resource
 usage on modern hardware---the search takes less than three seconds.
 This is a speedup of 576 times! It might not be reasonable to use the algorithm
 at all if it takes 25 or more to run for some turns.
 But if the cost is only a few seconds, it becomes entirely feasible.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="12" columns="3">
<features>
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<column alignment="right" valignment="top" width="0">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Procs
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Time (s)
\series default
 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Speedup
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1524 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
812 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.88
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
407 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.74
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
208 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7.32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
102 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.8
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
53.2 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28.7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
28.0 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
54.5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.9 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
102
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
256 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7.70 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
197
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.59 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
331
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1024 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.64 
\end_layout

\end_inset
</cell>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
576
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Speedups for a randomly selected problem instance on 1--1024 processors.
 The input observations were from the 10th ply of the game tree and the
 size of the information set in this instance is 4,495,121.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "speedups"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename plots/3schemes.pdf
	width 70text%

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
Experiments using different load balancing strategies.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "3schemes"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In our next round of experiments, we set out to compare a few different
 load-balancing strategies for the problem.
 We used the random, work stealing, and neighborhood balancing strategies
 that are available in the general purpose search engine.
 These results are shown in Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "3schemes"

\end_inset

.
 Our results show that there was actually very little variation in performance
 across the different strategies.
 We did notice that across all of our experiments, the work stealing approach
 appeared to be consistently---if only marginally---better than the others.
 Our hypothesis here is that perhaps the nodes are rarely starved for work.
 In other words, perhaps the very nature of the problem means that the load
 is naturally well-balanced and that the load-balancer rarely needs to do
 a significant amount of redistribution.
 This is probably also related to the fact that we are doing an all-solutions
 search.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "50line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename plots/3depths.pdf
	width 100text%

\end_inset

 
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
width "50line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename plots/3depthsnolog.pdf
	width 100text%

\end_inset

 
\end_layout

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
(Left) Log-log plot of running time for three different sizes of problem
 as the number of cores used increases.
 (Right) Same data with a linear y-axis for the running time (to help see
 the isoefficiency.)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "3depths"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We next attempted to measure the isoefficiency of the problem---how is efficienc
y of the parallelization of the algorithm affected by 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 size
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 of the problem? To test this we varied the number of plies in the test
 instance from 8 to 12.
 We used the work stealing load balancing strategy.
 The results are shown in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "3depths"

\end_inset

.
 The data are the same in both tables, but the one on the left uses a log-log
 scale.
 In the easiest case (depth 8), there isn't enough additional parallel work
 to justify the jump from 256 to 1024 processors, and performance actually
 degrades.
 Other than that, however, we see consistent speedups as we increase the
 number of processors.
 The plot on the right helps to illustrate the good isoefficiency of the
 problem.
 As the size of the problem increases, the amount of parallelizable work
 available also increases, and therefore the steepness of the speed curve
 is higher for larger problem sizes, as the number of processors increases.
 
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename plots/dep8.pdf
	width 60text%

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
Grainsize control data for depth 8 problems.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "dep8"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename plots/dep10.pdf
	width 60text%

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
Grainsize control data for depth 10 problems.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "dep10"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics
	filename plots/dep12.pdf
	width 60text%

\end_inset

 
\begin_inset Caption

\begin_layout Plain Layout
Grainsize control data for depth 12 problems.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "dep12"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, we ran some experiments to measure the effect of grainsize on the
 problem.
 The results are shown in Tables
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "dep8"

\end_inset

--
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "dep12"

\end_inset

.
 It is clear that there is a 
\begin_inset Quotes eld
\end_inset

sweet spot
\begin_inset Quotes erd
\end_inset

 for each problem size.
 (At least it is clear for this particular instance.
 It is possible that there would be different behavior on different problem
 instances.) When the grainsize is too small, the overall computation is
 hampered by excessive parallel overhead (communication, queueing of nodes
 to expand, load balancing operations).
 On the other hand, when the grain size is too large, it becomes too difficult
 to ensure that all processors are busy and processors are not idling with
 no work to do while a small number of processors are busy doing large-sized
 chunks of work.
\end_layout

\begin_layout Standard
In our experiments, the optimal grainsize is clearly related to the size
 of the problem, the depth of the search tree.
 The optimal sequential threshold seems to be 
\begin_inset Formula $2--4$
\end_inset

 less than the problem depth.
 Since the depth of all solutions is the same for each problem instance,
 this means that the number of levels that should be searched sequentially
 is fairly consistent across problem sizes.
 We noted that the number of solutions found---in other words, the size
 of the information sets---is typically fairly large with respect to the
 total number of nodes expanded.
 (We don't have hard figures, but we estimate that it was often 
\begin_inset Formula $30-40\%$
\end_inset

).
 This high density of solutions limits the variability that can be present
 in the amount of work to be done at the nodes representing the last few
 levels of the tree.
 This means that the best grainsize is also likely to be fairly predictable.
\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
An overview of the theory of imperfect information games and other basic
 topics in game theory can be found in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "kuhn03lectures"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "kuhn97classics"

\end_inset

.
 A technical explanation of the concept of information sets can be found
 in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "gilpin07algorithms"

\end_inset

.
 Algorithms for 
\begin_inset Quotes eld
\end_inset

solving
\begin_inset Quotes erd
\end_inset

 imperfect information games---in the sense of finding a Nash equilibrium---can
 be found in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "koller94fast"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "koller97representations"

\end_inset

.
 Koller 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
etal
\end_layout

\end_inset

, showed that an equilibrium can be found in time that is polynomial in
 the number of nodes in the game tree.
 And in fact, they found that it took about as much time to generate the
 full game tree as it did to actually solve it.
 Unfortunately, this is feasible only for small games.
 In larger games where theoretically optimal strategies cannot be computed
 efficiently, computer systems tend to utilize the concept of information
 sets or belief states in some form or another.
 A common strategy is to estimate the value of a move by averaging the estimated
 value of the associated descendant for each node in the current information
 set (or a random sample from the set).
 While this sort of 
\begin_inset Quotes eld
\end_inset

averaging over clairvoyance
\begin_inset Quotes erd
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 can
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 lead to very poor decisions, it is nevertheless a reasonable strategy in
 some games (e.g., Scrabble
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "sheppard02world"

\end_inset

).
\end_layout

\begin_layout Standard
In this work, we have argued for an information set generation approach
 to kriegspiel, but other authors have approached the problem differently.
 Parker 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
etal
\end_layout

\end_inset

, consider the problem of sampling from belief states in a variety of large
 game trees, including kriegspiel
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "parker05game"

\end_inset

.
 They show that some performance gains can be achieved by only approximate
 sampling from the belief state.
 Instead of generating the full information set, or even sampling from it,
 they sample from possible positions for the current state (i.e., sampling
 from the belief state) by matching only the most recent observations.
 This motivation for this approach seems to be that it would not be feasible
 to sample from the full information set, because of the computational expense
 involved.
 And indeed, our experiments bear this out-- it can indeed be expensive
 to produce the full information set.
 For the experiments shown in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "speedups"

\end_inset

, generating the full information set took over 25 minutes on a single processor.
 However, by utilizing the Charm++ search engine on a parallel machine (1024
 processors), we were able to generate the full set in just 2.9 seconds.
 (Note that this set had more than 4 million members.) Our results suggest
 that the problem is highly scalable and our approach might therefore be
 preferred.
\end_layout

\begin_layout Standard
Li gives an overview of kriegspiel and discusses strategy from the perspective
 of human players
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "li94chess"

\end_inset

.
 He walks through the analysis of several actual games between two human
 players and discusses the inferences that each player can and should make
 at each position.
 As in chess, human players are able to reason about the game at an abstract
 level; they tend to focus on a small number of critical possibilities and
 to emphasize the most important pieces and squares in each position.
 Computer agents, lacking such sophistication, nevertheless have some advantages
 when it comes to brute force search strategies.
 Programs such Deep Blue have shown that a brute force approach to game
 tree search can be effective, even against humans with vastly superior
 abstract reasoning capabilities, provided that significant computational
 resources are available and wisely used
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "campbell02deep"

\end_inset

.
\end_layout

\begin_layout Standard
Russell and Wolfe have performed some analyses on kriegspiel positions for
 which it possible to prove that one player has a forced win (that is, regardles
s of the configuration of the opponent's unseen pieces, the player has a
 sequence of moves that is guaranteed to produce a checkmate)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "russell05efficient, wolfe07exploiting"

\end_inset

.
 The authors assume knowledge of the player's belief state.
 They claim that under certain "aggressive" styles of play, it is uncommon
 for information sets to exceed 10,000 nodes in size.
 They throw out (i.e., do not analyze) any positions that exceed this threshold.
\end_layout

\begin_layout Standard
In our experiments, we have found positions in which the size of the information
 set is many tens of millions.
 Our goal is to develop strategies that are amenable to use in this more
 general setting.
 In other words, rather than being able to analyze positions only at the
 beginning or end of the game (when the size of the information set tends
 to be smaller), we want to be able to develop a strategy that can be used
 in the middle of the game as well.
 game).
\end_layout

\begin_layout Standard
Nance 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
etal
\end_layout

\end_inset

, approach the game from the perspective of 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
em
\end_layout

\end_inset

 logical filtering.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "nance06reasoning"

\end_inset

 The goal of logical filtering is to maintain a compact logical representation
 of an agent's belief state.
 Recall that a belief state is a probability distribution over the possible
 current states of the world.
 A belief state for kriegspiel might take the form of 
\begin_inset Formula $(at(whitepawn,a2)\wedge atwhitepawn(b2)\ldots\wedge at(whiterook,h1))\vee(at(whitepawn,a3)\wedge\ldots\wedge at(whiterook,h1))\ldots$
\end_inset

 For even moderately sizes information sets, such representations can become
 unwieldy in terms of storage and the cost of updating.
 Furthermore, reasoning with such representations often requires the use
 of some theorem-proving mechanism to run logical queries, such as 
\begin_inset Formula $at(blackking,a3?)$
\end_inset

.
 Nance et al.
 develop some strategies to maintain compact representations under sequences
 of actions and observations.
 They give a theoretical analysis of the kinds of problems that can be treated
 in this way.
 Unfortunately, kriegspiel in its full complexity is beyond the scope of
 their algorithm.
 In order to reason about the belief states in the game, they must assume
 knowledge of the particular kind of piece that move in each turn.
\end_layout

\begin_layout Standard
The information set generation approach that we have presented is certainly
 also computationally expensive.
 And representing a full information set (e.g., as a list of sequences of
 moves that encode a path from the start state to the current node) would
 be similarly expensive in terms of storage space.
 However, we have shown that our algorithm is also highly scalable.
 Furthermore, contrary to the approach in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "nance06reasoning"

\end_inset

, our approach is readily adaptable to sampling algorithms.
 Given a sample size that matches available memory, any single sequence
 of moves is readily extractable without the computational expense of a
 theorem prover or SAT solver.
\end_layout

\begin_layout Section
Future Work
\end_layout

\begin_layout Standard
First and foremost, it would be interesting to see how our information set
 generation algorithm would perform as a subroutine to an actual kriegspiel
 playing program.
 The utility of generating an information set is ultimately determined by
 how well that information improves a player's decision-making capabilities.
 We noted earlier that a common use of information sets is to estimate the
 value of a move by averaging the estimated value of the associated descendant
 for each node in the current information set (or a random sample from the
 set).
 This kind of strategy can be applied naively using a belief state sampling
 algorithm (i.e., an algorithm that samples from the distribution of possible
 worlds in the current state without respect to the overall history of moves).
 However, it has been shown that significant improvement in play can be
 achieved by estimating the value of future moves from the perspective of
 the opponent, based on the knowledge that the opponent would have had at
 prior positions in the move history
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "richards07opponent"

\end_inset

.
 Such a strategy would require the use of an information set generation
 algorithm of the kind that we have described here.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This work is underway.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ideally, we would run our algorithm on some deeper instances from real kriegspie
l games.
 We are not aware of a repository of such games.
 Unfortunately, notation for kriegspiel is not standardized and there are
 several minor variations in rules (i.e., with respect to the nature of referee
 announcements) that are unlikely to significantly to impact the computability
 and scalability results but which nevertheless make it difficult to write
 an input reader that converts the transcript of a game into a sequence
 of moves readable by our algorithm.
 An alternative would be to play some games ourselves.
 Currently, the manual encoding of games is not difficult but is tedious.
 Still, it would be nice to have some games that go on for 40 or 50 moves
 and have positions where the information sets are of moderate size (on
 the order of a few hundred thousand to a few million).
\end_layout

\begin_layout Standard
The information set generation algorithm that we have implemented here is
 the most straightforward one and is alluded to in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "parker05game"

\end_inset

 and
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "russell05efficient"

\end_inset

.
 It is analogous to the 
\begin_inset Quotes eld
\end_inset

expand-at-the-tip
\begin_inset Quotes erd
\end_inset

 strategy for the Hamiltonian Circuit problem.
 An alternative information set generation algorithm is described in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "richards09information"

\end_inset

 (but not implemented in parallel) and could potentially improve the search
 efficiency greatly by exploiting variable ordering.
 This would be analogous to the disconnected edge-pairs
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is what we referred to as 
\begin_inset Quotes eld
\end_inset

algorithm 2
\begin_inset Quotes erd
\end_inset

 in class.
\end_layout

\end_inset

 heuristic for the Hamiltonian Circuit problem.
 Rather than search from the root node going forward, this algorithm would
 seek opportunities for pruning based on the propagation of logical consequences
 from each move both forward and backward in time.
 This, incidentally, is more consistent with the way human players would
 analyze the game.
 For example, if a player's proposed bishop move is rejected and the bishop
 is sufficiently removed from its own king, then the player may infer that
 one of his opponent's pieces is along that rejected path.
 At least one of those spaces must have been the destination of a prior
 move by the opponent.
 If a recent move by that bishop crossed the same path, then that would
 be hard evidence that those squares were empty at the time.
 And therefore, the arrival of the opponent's piece must have been between
 the previous (successful) bishop move and the current (unsuccessful) bishop
 move.
 To implement this algorithm, we envision the use of planning graph type
 data structures
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "blum97fast"

\end_inset

.
 Planning graphs have a sequence of alternating levels of state constraints
 and action constraints.
 State constraints would be of the form 
\begin_inset Formula $at(bishop,d4)\vee at(bishop,e6)$
\end_inset

 or 
\begin_inset Formula $!occupied(e4)$
\end_inset

.
 Action constraints would be of the form 
\begin_inset Formula $move(knight,a4,c5)\vee move(knight,e6)$
\end_inset

.
 At a minimum, each level would require a data structure with a bit for
 each possible action/state.
 Propagating the constraints would require much of the same machinery used
 in STRIPS-like planning algorithms
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "chen05solving"

\end_inset

, and one of the many knobs that would need to be tuned would be the depth
 of the propagation for each constraint.
 (Should the consequences of a known action or non-action be propagated
 one move into the future and one move into the past? More? Less?) Additionally,
 there would be a significant and interesting tradeoff in the effectiveness
 of pruning and the size of the data structures that would have to be encoded
 in each chare.
 The best algorithm might be a hybrid strategy that does forward propagation
 from the root at the parallel level and constraint propagation at the sequentia
l level.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This work is also in progress.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are certainly several places where the efficiency of the details of
 each node expansion could be improved.
 Many of these would reduce the overall running time but would not necessarily
 be interesting from the standpoint of evaluating the efficiency and isoefficien
cy of parallelization.
 For example, in checking to see if a position leaves a player in check,
 we currently utilize existing helper functions that generate possible moves
 for the opponent.
 It would be possible to write a more specialized function that focuses
 only on the position of the king in question and looks only at the squares
 along its rank, file, diagonals, and knight-edges for threats.
 There are also some memory allocation issues that could be improved.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
We have shown that information set generation for kriegspiel can be efficiently
 parallelized.
 The opportunities for parallelism increase as the problem size increases.
 Our algorithm has performed well on problems with information sets with
 as many as 65 million nodes---much larger than any other treatment of the
 problem that we are aware of.
 Because the algorithm can be efficiently parallelized, it would be reasonable
 to explore using it in a full kriegspiel player.
 It remains to be seen whether these scalability properties hold over a
 wide variety of playing styles and problem instances.
 We suspect that fruitful research remains with respect to alternative algorithm
s that implement variable ordering heuristics.
\end_layout

\begin_layout Section
Appendix A
\end_layout

\begin_layout Standard
The purpose of this figure is simply to help visualize the concept of informatio
n sets in game trees.
 The tree for kriegspiel is very difficult to visualize/depict (even an
 interesting part of the tree).
 Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fulltree"

\end_inset

 shows the full game tree for a simple variant of poker known as Kuhn poker,
 which we hope will serve to at least make the concept clear, even if the
 poker game itself is not immediately relevant.
 There are three cards: a king, a queen, and a jack.
 The dealer deals one card to each of two players.
 Each player antes one unit, and there is one simple round of betting, in
 which the size of the pot may be doubled.
 Left branches denote check/fold; right branches denote bet/call.
 For this zero-sum game, terminal nodes are labeled with payoffs to player
 1, whose decision points are shown in triangles.
 Connections between nodes in the same information set are shown with dotted
 lines.
 The top level shows three different information sets for the first player,
 one for each possible card that could be dealt to him.
 There are two nodes in each set, because no matter what the deal is, there
 are two possibilities for the card that the other player holds.
 The leftmost information set on the bottom level corresponds to player
 1's observation that he was dealt a king and checked, and then the opponent
 wagered.
 The second player has six information sets as well, but they are all at
 the same level of the tree.
 Like the first player, the second player has a separate information set
 for each possible card that he could be dealt.
 And the two nodes in each set are there because there are two possibilities
 for the opponent card.
 The second player also gets to know whether the first player checked of
 bet, and that is why there are twice as many information sets.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{*}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{richards09information}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{russell05efficient}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{kuhn03lectures}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{kuhn97classics}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{parker05sampling}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{nance06reasoning}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
nocite{li94chess}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
begin{thebibliography}{99}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
end{thebibliography}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
begin{figure}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Appendix B
\end_layout

\begin_layout Standard
Verbose output from the information set generation algorithm.
 The listing shows possible sequences of moves that are consistent with
 the black's observations after ten plies.
 The resulting position after each consistent sequence of moves is shown
 below.
 Based on these results, black can know with certainty the location of white's
 pawn at d6 and white's bishop at g5.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{verbatim}
\end_layout

\end_inset

 1.
 Pa2:a4 Pa7:a5 2.
 Pd2:d4 Pb7:b6 3.
 Bc1:g5 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - p - - - - - - - - - - - - - - - -
 p p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d3 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pd3:d4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - - p
 p p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Pa2:a4 Pb7:b6 3.
 Bc1:g5 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - p - - - - - - - - - - - - - - - -
 p p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:f4 Pb7:b6 3.
 Bf4:g5 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - - p
 p p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pa2:a3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - p - - - - - - - -
 p p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pa2:a4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - p - - - - - - - - - - - - - - - -
 p p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pb2:b3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - p - - - - - - p
 - p - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pc2:c3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - p - - - - - p
 p - - p p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pe2:e3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - p - - - p
 p p - - p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pe2:e4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - p - - - - - - - - - - - p
 p p - - p p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pf2:f3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - p - - p
 p p - p - p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pf2:f4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - p - - - - - - - - - - p
 p p - p - p p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pg2:g3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - p - p
 p p - p p - p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Pg2:g4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - p - - - - - - - - - p
 p p - p p - p r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ph2:h3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - p p
 p p - p p p - r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ph2:h4 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - p - - - - - - - - p
 p p - p p p - r n - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Nb1:a3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - n - - - - - - - p
 p p - p p p p r - - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Nb1:c3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - n - - - - - p
 p p - p p p p r - - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Nb1:d2 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - - p
 p p n p p p p r - - q k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Qd1:d2 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - - p
 p p q p p p p r n - - k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Qd1:d3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - q - - - - p
 p p - p p p p r n - - k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Qd1:c1 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - - p
 p p - p p p p r n q - k b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ke1:d2 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - - p
 p p k p p p p r n - q - b n r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ng1:f3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - n - - p
 p p - p p p p r n - q k b - r **********************************************
 1.
 Pd2:d4 Pa7:a5 2.
 Bc1:g5 Pb7:b6 3.
 Ng1:h3 Pc7:c5 4.
 Pd4:d5 Nb8:a6 5.
 Pd5:d6 Pf7:f6
\end_layout

\begin_layout Standard
********************************************** R - B Q K B N R - - - P P
 - P P N P - p - P - - P - P - - - b - - - - - - - - - - - - - - - - n p
 p p - p p p p r n - q k b - r **********************************************
 Solutions founds: 25 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{verbatim}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
caption{Verbose output from example game.
  Generating information sets for black after five turns by each player.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%From this, black can infer that there is definitely a white bishop at g5
 and a white pawn at d6.}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
label{verboseoutput}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%
\backslash
end{figure}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
bibliographystyle{acm}
\end_layout

\end_inset

 
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "paper"
options "acm"

\end_inset


\end_layout

\end_body
\end_document
