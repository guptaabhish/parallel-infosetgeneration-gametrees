Changes 
-------

1. NodeQueue::registerState(size_t size, unsigned char childnum) now has two arguments:
   . size: the amount of memory you require for a state
   . childnum: the priority of this state relative to its siblings. This argument
     is of type unsigned char. A value of 0 indicates highest relative priority.
     A value of 1 indicates lower priority, 2 is lower still, etc.

   This change should enforce a left-to-right traversal of the search tree.

2. NQueenCore::getStartState(): some of you were concerned about the recent changes
   to this method, and the seemingly complicated code that went into it. This version
   of the code is simpler but does more work. All it does is ask for enough space
   for the start state, and manipulate the obtained run of bytes so as to initialize
   it. 

3. NQueenCore::expand(State *parent, NodeQueue *q): This function has been changed so
   as to be as close as possible to the requirements of the assignment. 
   
   In particular, if 'parent' is still at a shallow level of the tree, we generate
   children states and pass them to the search engine through the paired registerState/push
   calls. 
   
   On the other hand, a sequential, recursive exploration of the 'parent' state is initiated 
   (through the function 'recursive_nqueens') if 'parent' is at a sufficient depth of the tree. 

   Your code should do something similar: for instance, you may decide to stick to a parallel
   search (and therefore use registerState/push to create new children tasks) if fewer than
   a threshold number of vertices have been added to the (incomplete) tour. Otherwise, you 
   would initiate a recursive search under 'parent', and leave the search engine completely
   out of the picture by NOT calling registerState/push.

   Notice that in the 'recursive_queens' function, the existence of solutions is notified to
   the search engine by the 'foundSolution()' call. This causes the search engine to try and
   terminate the computation. If required, you should print out the solution just before this 
   call. 

4. Running the N-Queens example. Shown below is the command for a 10-Queens problem with a
   sequential threshold of 4. That is, for nodes with depth greater than 4, a sequential, recursive
   search is performed.

   ./charmrun +p4 ./nqueens 4 10 

   Notice that the arguments of max_stack_size and max_nodes are not used anymore, since we do
   C++-runtime managed recursive traversal for our sequential search.

Instructions
------------

1. Base your code on the N-Queens example given with the search engine. 
   In particular, look at the NQueenCore class, which you will modify.

2. You should have implementations for the following AppCore (the class from
   which NQueenCore inherits) methods in order to get a working search procedure:

  . void getStartState(NodeQueue *q) : 

    This method should return the initial state for the search.
    As you may notice in the NQueenCore implementation of this method, the idea
    is to ask for a certain amount of memory from the queue through the registerState
    function, manipulate it and finally 'commit' this memory to the queue through
    the push function. This causes the search engine to create a new task corresponding
    to the pushed state. 
    
  . void expand(State *parent, NodeQueue *q) : 

    Process the 'parent' state by enumerating its children. The N-Queens example gives you
    a template to base your solution on. In that code, if the row of 'parent' is below a 
    certain threshold (i.e. 'parent' is at a relatively shallow level of the tree,) we 
    create new tasks corresponding to the children of parent by using the registerState/push
    functions. If it is sufficiently deep, 'parent' is explored sequentially, in a recursive
    manner. If you wish to notify the search engine of the existence of a solution, call the
    'foundSolution()' method, as outlined earlier. 

    Remember to pass an unsigned char argument in order to specify the priority of this node 
    by passing an appropriate value for childnum.


  [ The following function is the same as previously ] 

  . bool isGoal(State *s): 
    Inform the search engine whether this is a goal state.

3. Load Balancing. Your makefile has three targets, each using a different load balancing technique.
   These are, 'random', 'workstealing' and 'neighbor'. 
   
   (a) In the 'random' strategy, a newly created task is sent by the origin processor to some random processor.
   (b) In 'workstealing', a newly created task is enqueued on the origin processor. It might be stolen by 
       another processor in the future.
   (c) In 'neighbor' balancing, newly created tasks are sent to the neighbors of a processor. These neighbors
       are formed by imposing a dense-graph virtual topology on the processors. 

   For (a) and (b), you would run the command as shown in point 4. of the 'Changes' section. For (c), use the 
   following command:

   ./charmrun +p4 ./nqueens.nbr 4 10 +LBTopo graph_nc_<k>

   where k specifies the connectivity of the graph.

4. Making a 'readonly' copy of your graph available to each processor. In the nqueens.ci file, you will notice 
   a 'readonly' variable, vector<int> varLengthArray variable. The readonly is akin to the const keyword in C/C++. 
   It allows you to modify the variable once (in the constructor of NQueens) before the variable a copy is sent
   to each processor in the system. This way, you can create a graph in the startup (i.e. the constructor) of your
   application and the Charm++ runtime system will ensure that a copy of this graph is sent to each processor. Notice
   that any writes to it by a processor after the constructor of your application will not be reflected on others. 
